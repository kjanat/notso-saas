version: '3.8'

services:
  # PostgreSQL - All data storage
  postgres:
    image: postgres:17-alpine
    container_name: saas-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: saas_platform
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # Redis - Cache and job queues
  redis:
    image: redis:8-alpine
    container_name: saas-redis
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # MinIO - S3-compatible storage (optional for development)
  minio:
    image: minio/minio:latest
    container_name: saas-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # API Service (Monolith)
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: saas-api
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/saas_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-development-secret
      PORT: 3000
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api/src:/app/apps/api/src
      - ./packages:/app/packages
    networks:
      - saas-network

  # Worker Service (Background jobs)
  worker:
    build:
      context: .
      dockerfile: ./apps/worker/Dockerfile
    container_name: saas-worker
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/saas_platform
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/worker/src:/app/apps/worker/src
      - ./packages:/app/packages
    networks:
      - saas-network

  # WebSocket Service (Real-time)
  websocket:
    build:
      context: .
      dockerfile: ./apps/websocket/Dockerfile
    container_name: saas-websocket
    environment:
      NODE_ENV: development
      REDIS_URL: redis://redis:6379
      WEBSOCKET_PORT: 3001
      CORS_ORIGINS: http://localhost:3000,http://localhost:3002
    ports:
      - '3001:3001'
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/websocket/src:/app/apps/websocket/src
      - ./packages:/app/packages
    networks:
      - saas-network

  # Development tools (optional)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: saas-mailhog
    ports:
      - '1025:1025'
      - '8025:8025'
    networks:
      - saas-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  saas-network:
    driver: bridge
