version: '3.8'

services:
  # PostgreSQL for multi-tenant data
  postgres:
    image: postgres:17-alpine
    container_name: saas-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: platform_db,tenant_template_db
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-multi-db.sh:/docker-entrypoint-initdb.d/01-init-multi-db.sh
      - ./docker/postgres/init-schema.sql:/docker-entrypoint-initdb.d/02-init-schema.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # Redis for caching, sessions, and job queues
  redis:
    image: redis:8-alpine
    container_name: saas-redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', 'redis_password', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: saas-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # MinIO for S3-compatible storage (3D models, avatars, exports)
  minio:
    image: minio/minio:latest
    container_name: saas-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # Elasticsearch for analytics and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.3
    container_name: saas-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200/_cluster/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - saas-network

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.9.2
    container_name: saas-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - '9092:9092'
    networks:
      - saas-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.2
    container_name: saas-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - saas-network

  # Traefik as API Gateway
  traefik:
    image: traefik:v3
    container_name: saas-traefik
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websocket.address=:8080'
    ports:
      - '80:80'
      - '8080:8080'
      - '8888:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml
    networks:
      - saas-network

  # Development tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: saas-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '5050:80'
    depends_on:
      - postgres
    networks:
      - saas-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: saas-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - saas-network

  mailhog:
    image: mailhog/mailhog:latest
    container_name: saas-mailhog
    ports:
      - '1025:1025'
      - '8025:8025'
    networks:
      - saas-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  elasticsearch_data:

networks:
  saas-network:
    driver: bridge
