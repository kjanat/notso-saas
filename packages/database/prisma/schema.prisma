// Platform Database Schema (Shared across all tenants)

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant management
model Tenant {
  id                 String             @id @default(cuid())
  slug               String             @unique
  name               String
  databaseName       String             @unique
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  subscriptionPlan   SubscriptionTier   @default(TRIAL)
  maxChatbots        Int                @default(1)
  isActive           Boolean            @default(true)
  trialEndsAt        DateTime?
  metadata           Json               @default("{}")
  settings           Json               @default("{}")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  users              TenantUser[]
  apiKeys            ApiKey[]
  usageMetrics       TenantUsage[]
  webhooks           Webhook[]
  chatbots           Chatbot[]
  
  @@index([slug])
  @@index([subscriptionStatus])
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  passwordHash   String
  name           String
  avatarUrl      String?
  isActive       Boolean      @default(true)
  emailVerified  Boolean      @default(false)
  lastLoginAt    DateTime?
  preferences    Json         @default("{}")
  metadata       Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  tenants        TenantUser[]
  sessions       Session[]
  apiKeys        ApiKey[]
  auditLogs      AuditLog[]
  
  @@index([email])
}

model TenantUser {
  id         String   @id @default(cuid())
  tenantId   String
  userId     String
  role       UserRole @default(TENANT_USER)
  permissions Json     @default("[]")
  joinedAt   DateTime @default(now())
  invitedBy  String?
  
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  ipAddress  String?
  userAgent  String?
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model ApiKey {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  keyHash     String    @unique
  permissions Json      @default("[]")
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdBy   String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User      @relation(fields: [createdBy], references: [id])
  
  @@index([keyHash])
  @@index([tenantId])
}

model TenantUsage {
  id        String   @id @default(cuid())
  tenantId  String
  period    DateTime
  metrics   Json
  costs     Json
  createdAt DateTime @default(now())
  
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, period])
  @@index([tenantId])
  @@index([period])
}

model Webhook {
  id           String   @id @default(cuid())
  tenantId     String
  url          String
  events       String[]
  secret       String
  isActive     Boolean  @default(true)
  headers      Json?
  retryPolicy  Json?
  lastTriggered DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deliveries   WebhookDelivery[]
  
  @@index([tenantId])
}

model WebhookDelivery {
  id          String   @id @default(cuid())
  webhookId   String
  event       String
  payload     Json
  response    Json?
  statusCode  Int?
  attempts    Int      @default(1)
  success     Boolean  @default(false)
  createdAt   DateTime @default(now())
  deliveredAt DateTime?
  
  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  @@index([webhookId])
  @@index([event])
}

model AuditLog {
  id         String   @id @default(cuid())
  tenantId   String?
  userId     String?
  action     String
  resource   String
  resourceId String
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  
  user       User?    @relation(fields: [userId], references: [id])
  
  @@index([tenantId])
  @@index([userId])
  @@index([resource])
  @@index([timestamp])
}

// Chatbot models
model Chatbot {
  id              String         @id @default(cuid())
  tenantId        String
  name            String
  slug            String
  deploymentKey   String         @unique
  description     String?
  avatarUrl       String?
  systemPrompt    String         @db.Text
  welcomeMessage  String?
  provider        AIProvider
  model           String
  temperature     Float          @default(0.7)
  maxTokens       Int            @default(500)
  responseTimeout Int            @default(30000)
  metadata        Json           @default("{}")
  settings        Json           @default("{}")
  appearance      Json           @default("{}")
  behavior        Json           @default("{}")
  placement       Json           @default("{}")
  knowledgeBase   Json           @default("[]")
  purpose         ChatbotPurpose @default(GENERAL)
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversations   Conversation[]
  
  @@unique([tenantId, slug])
  @@index([tenantId])
  @@index([deploymentKey])
  @@index([isActive])
}

model Conversation {
  id               String             @id @default(cuid())
  chatbotId        String
  sessionId        String
  status           ConversationStatus @default(ACTIVE)
  sentiment        Float?
  metadata         Json               @default("{}")
  startedAt        DateTime           @default(now())
  endedAt          DateTime?
  lastActivityAt   DateTime           @default(now())
  
  chatbot          Chatbot            @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages         Message[]
  
  @@unique([chatbotId, sessionId])
  @@index([chatbotId])
  @@index([status])
  @@index([startedAt])
}

model Message {
  id                  String      @id @default(cuid())
  conversationId      String
  role                MessageRole
  content             String      @db.Text
  metadata            Json?
  model               String?
  promptTokens        Int?
  completionTokens    Int?
  totalTokens         Int?
  cost                Float?
  latencyMs           Int?
  sentiment           Float?
  triggeredAnimation  String?
  createdAt           DateTime    @default(now())
  
  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([role])
  @@index([createdAt])
}

// Enums
enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELLED
  SUSPENDED
}

enum SubscriptionTier {
  TRIAL
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum UserRole {
  PLATFORM_ADMIN
  TENANT_ADMIN
  TENANT_USER
  TENANT_VIEWER
}

enum AIProvider {
  OPENAI
  ANTHROPIC
  VERTEX
}

enum ChatbotPurpose {
  SALES
  SUPPORT
  ONBOARDING
  GENERAL
}

enum ConversationStatus {
  ACTIVE
  ENDED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}